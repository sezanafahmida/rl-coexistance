%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 382.000000 357.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 382 357
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 382 357
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /u put
dup 35 /r put
dup 36 /n put
dup 37 /space put
dup 38 /R put
dup 39 /x put
dup 40 /O put
dup 41 /F put
dup 42 /N put
dup 43 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



04BE0037000000480048007400B4015401E4020A0224026C029A02EA0316034C00010000000D0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/space 1 def
/F 2 def
/N 3 def
/O 4 def
/R 5 def
/T 6 def
/l 7 def
/n 8 def
/r 9 def
/u 10 def
/x 11 def
/uni2B91 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8B797ECD8A92D182D8DBCA967150160D16E975F5B080F550B936C998F0900FAA838BB4FA8A605EE3D9B697B5992B84A7079A639AC8BBBB9B01FC23938C69E4F1E36F68431C78F67F4F0AF8CE291B43C8F6775583AF34CDB784551E21D59739892CFC475CB6F03233043095125FDD1CA2B7F0AB35A958D8F270A13BC84628D30D2B9B5933906003D9E748D06778D7FEE1FFBB5A930ABDB8F0E446EF9B047DB83ED57385C2C05ADB9C4AFECAADF7B3863EF490A1CD4B8FC80A1450BAA367BA92CB44ACA89675EECEB62C8E29466C3FDBE0806AA2CEC8F76424CF8490A791DB1132C7FAE4446226A4518AF9308A291C532037D3AE6BAC8B834AB4E4805A5F2B86D1A1EA8475AC68E0A0BC0535B79C932CD5DCE54F0FF2C2D95FC8286C495E3F9F575919B80EFD3F3DA153DF6B58A43BBD0929E7A683F42DE0CA1BBAE7336F579A3526330B4912C343F10CE5EBCB6AB613F62CECA9A2DAE845B36289F9C0C9682E0DD582126BE367208A57E49B37041AB9602977A98C4EE3675E6983C3FF1AAE302DECC13EF2CB5F2E6D7D8499ADA12174EFB77CACDB0159AFF4A7B4ABF9B8A1C4FC64C98840E030080A08B75331A7E7EE5703D687DD6009688B539A86BF80263D95575A8B1B5127CF290FF19550A5AE17BCC55DE0A1EAF6424960DC43AD3511ADDDDA3775D6E100D5C6FE0C5433BCE908E2B33E8DBF08F9CED7999ACA73AB4535E6F59A144321

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: ArialNarrow
%!FontType1-1.0: ArialNarrow 1.0000.2.3800
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /ArialNarrow def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /x put
dup 35 /underscore put
dup 36 /O put
dup 37 /N put
dup 38 /F put
dup 39 /T put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -373 1 index div -628 2 index div 2047 3 index div 2224 5 -1 roll div]cvx def
/sfnts [<



069994A3FEF8FEF6A293A4EFABAFED3D2FBD70B4E902CA01770193B4FEA9EDFEBACDE2E8D20126FEF1FED5012E0125BD957289FED40000020081000004A505BA0016002000D74033440BAD12022C080B0B110F0F5F0E0B140E0E0B09091814181759151514140E1F20590201020016160F0F0E0809091C160FA50EB8018C40151C7930065006700680060400062006400660060406B801E04015002016600100001000F000031000F0000250000100B90192002110F672715D3CFD3C10FD715DEDF4ED1112392F003F3C103C103C3F3CFD3C12392F3C10FD3C191112392F87052E182B0E7D10C4012E002E3130184379401E191E03081A25042519081C7E011E031C7E011B07187E0008091D051F7E012B103C2B012B2B2B2B8181015D331121321E0115140607161716171323032E022B01190121323E013534262321810215A79F66ADA543234736D2C8A05D5F5950B801567074448280FE8405BA52BF7EA6CE1C28295467FE710131B37C2BFD75033336744D6F7F0001002A000003E305BA0007006E404D00090130096F097009A0090405025904030207000805CA0602CA010607010760000010000200001000A000B000E000F00006200030006F00C000D000059000D00002096000A0000239000009081112392F5E5D5E725D715DED3C103C10E410E4003F3C3F3CFD3C3130015D71211121352115211101B6FE7403B9FE72050DADADFAF30001FFF4FF0003AFFF660003001E400E0100E60203014A05004904807C182B4E10E410E6002F3C4DFD3C3130072115210C03BBFC459A66000002006C000000FF05BA000300070059403300093009025009B009020003F0020F0101010006050607040A02030306075D04010000050530045004A0040390040110040104B90211000810F65D72713C103C103C10FD3C3C103C003F3C3F3C3F5D3CFD3C3130015D7113353315031133116C93939304EBCFCFFB150426FBDA000001000C0000033B042600100121404F0F121F122F123F124F1265056907680B6A0C690E660FC0120C07040608090E090F0413060104050606090B0C0B0A0C030101000F0F100E0D0D020B0B0C0F100F0D100A08070606030100010200090FBB013D000B0006013D402A0BC0010102090A10107800091400000903020D0D780C03140C0C030A090903030206100D0D0C0C000A01BA0102000B01024025200FFB06060C0009EE0A900C03EE0290000DEE2F0C500C700C030CA810EED000017F000100B90181001110F65D72EDFD5DED10F4ED10F4ED191112392F18E51A19EDED00183F3C103C103C3F3C103C103C87052E2B877DC4872E182B877DC4001912392F18E519ED10ED87087D10C4083C0EC43C870810C408C4870E10C408C4083C870810C408C40EC4C43130007271015D33090133171617363F0133090123032703



00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/F 1 def
/N 2 def
/O 3 def
/R 4 def
/T 5 def
/underscore 6 def
/i 7 def
/x 8 def
/acute 9 def
/glyph662 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-373 -628 2047 2224}def
/UniqueID 4448858 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693491A2FA54E38FF421606F45C9002B1212D9769172431F2B01CB67BA41C541550DC40C32844FF47FFDFFB99C2A4A65F20702D1665616DE4997D0EBBFFB69362990320334A153411FF6BFAB0B648763E4154C93BBD085963A018673C2AB92BC00ADA007CDCBA5591D47BEAA74BD02D2991E2D0CF2D0022EF52D78781711697FB784B832DB7FD5DA70B5A3A2F730F6A16D14DDF4B52E0FA8F7AE13808DD2AEFE5A908FA1A98276E3E015A4D442ADC4B8BA5C108B4DDF377AB5DC0CA452DA2E27AC29D2993598E1C5202C53F0B4010BD6892C3C212353AF882D33E3255F43B055A2F377624A2FA1DDB23A8F3F2FA3BD958D4542F463F8503B27F4FFF81445CB37E229CC1EB891113B7989B3A94FB10BB7F24C48C1826BD3A1EEEE91BE517DA09FB272C2570CEBBC6F95821C9511F717D25650DBBCB6ED8106CB2CD010CB3601590722749D5AD4CBFBDCE64FDE33B59DAF4F40AFD2CB4A38729981B56419AD2F7604FFBBCC7BEB7A7050B12017BB76E8203C797F423A7E34018FC00B216A03A18A6BBAACFDF301F64EFC2BD27D66A759E788055E02574AE4A9763AF28A99AC6EEDB03BB4A14F52545CC7C4319245011726DC558EF5ACB2F88A8F50E60B513245936682C9E8897C6EE3D7E307A9740A00CF167E3CFCF0A75A9BDD9C9BDDBA82A0018C8CF598A48294B22E9DD2C2144B934DC8B3C8A6D2CD4CCAC7AC69A7BD8E1F346AFDFCD1903BB1F90CD793D9E6AA9B5CDA7770999304477AD54C73BDD4F07AAD13D0D3269EEB289ABED3B7C9716F67693EF0925C939
DB05E384021D2C0A667F7953087509835246E2568776B0ABCC208DE1F4FD091B61AB1F84D41FCF58FA7911781C29D3851DC86A4D9C1E7CDE62CD762730CD747AF68015FB868AE3E6A1B654E8946B5AF3BAA12403EDA5D8F95999C24C379CFB88589EEB8BEA964869386D803C213911F5C5E3B132AF5BAB3300568034CDB41C9EAAF5B70E3297FF540AB43D0A8263B4316C88D5A5FCA8B62F68B06A6FBABE13D07A171BCCBAB4957F59226CBC5C7A5E96D853D4F22F340ABFCD45F2734208EFDCF671D837585DA9EF21E043E0A391115A81C7C79AB59144183376C015C59E15F33E15E062C363DB5B86A55628D37E22B1EA1E8540FBB8F5F8D9D6FD67DFF26A66C88903D7CF12CECC4290419E3A48BD9A31979EA57546C815F646493141705995F6FD80D82ABA34CE9C5B7F2DB57FFD8C4028C84F1EC6BD84FADFB30825727EB24AF6CB3C67ED618936DF2315A1D82A6A879466EBB3D9991D0617D8E53ECE2F4CD6CA305F685B91FDDCECBDB5454E1F56E815028563C853CDB20B17266CF4D0BA4A8AE06365A1F0C3C861CB54B818FDE01A64E33F71F99B492810CA7D61C0EBB0EF00EFE48285268867422168329E6A34BE0B6737620CFC91AE40A16F841A1DF3F1AC5EB4E509C08A52176DA461E57E0A43F7E707CAA1BDE1320C5EC0BE67F0498F3AD9D8F656CC343AB65111B4AD84F2BA0E2D9CD90256BDF6305F82492C32FFD0587C0E62A9203738F64DBF48E0D8BE37634AAF38327198A3B9738CB3CC5604F9703FE2187C1389C2CF642E7D5B214E8E5B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/ArialNarrow cguidfix
/F2.1/ArialNarrow renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 382 357 rc
0 357 m
382 357 l
382 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-869 1043 m
1251 1043 l
1251 -686 l
-869 -686 l
h
-869 1043 m
f
/Cs1 SC
0 sc
1 0 0 -1 194.83176 341.25 cm
/F1.1[ 16 0 0 -16 0 0]sf
-44.896 5.776001 m
(!"#$%&'%\(\)\))[ 7.712000 8.896000 5.616000 8.896000 4.448000 10.960000 8.288000 4.448000 12.160000 9.184000 0.000000 ] xS
/Cs2 SC
0.99942404 0.98555368 0 sc
CM
100.08392 292.75089 m
112.91396 283.08542 112.91396 267.41458 100.08392 257.74911 c
87.253952 248.0836 66.452477 248.0836 53.622509 257.74911 c
40.792477 267.41458 40.792477 283.08542 53.622509 292.75089 c
66.452477 302.41638 87.253952 302.41638 100.08392 292.75089 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -125 358 cm
225.08392 65.24913 m
237.91396 74.914597 237.91396 90.585403 225.08392 100.25087 c
212.25395 109.91639 191.45248 109.91639 178.62251 100.25087 c
165.79248 90.585403 165.79248 74.914597 178.62251 65.24913 c
191.45248 55.583607 212.25395 55.583607 225.08392 65.24913 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 76.853218 277.25 cm
/F2.1[ 20 0 0 -20 0 0]sf
-26.879883 7.5 m
(!"#$%)[ 11.835938 8.203125 9.121094 12.763672 0.000000 ] xS
/Cs2 SC
0.99942404 0.98555368 0 sc
CM
333.62384 295.96609 m
346.45389 286.30063 346.45389 270.62982 333.62384 260.96436 c
320.79388 251.29883 299.9924 251.29883 287.16245 260.96436 c
274.3324 270.62982 274.3324 286.30063 287.16245 295.96609 c
299.9924 305.63162 320.79388 305.63162 333.62384 295.96609 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -125 358 cm
458.62384 62.033905 m
471.45389 71.699371 471.45389 87.370178 458.62384 97.035652 c
445.79388 106.70117 424.9924 106.70117 412.16245 97.035652 c
399.3324 87.370178 399.3324 71.699371 412.16245 62.033905 c
424.9924 52.368385 445.79388 52.368385 458.62384 62.033905 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 310.39316 279.46521 cm
-30.981445 7.5 m
(!"#$&&)[ 11.835938 8.203125 9.121094 12.763672 10.019531 0.000000 ] xS
/Cs2 SC
0.99942404 0.98555368 0 sc
CM
101.08392 93.865784 m
113.91396 84.20031 113.91396 68.529503 101.08392 58.864033 c
88.253952 49.198517 67.452477 49.198517 54.622509 58.864033 c
41.792477 68.529503 41.792477 84.20031 54.622509 93.865784 c
67.452477 103.5313 88.253952 103.5313 101.08392 93.865784 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -125 358 cm
226.08392 264.13422 m
238.91396 273.79968 238.91396 289.47049 226.08392 299.13596 c
213.25395 308.80148 192.45248 308.80148 179.62251 299.13596 c
166.79248 289.47049 166.79248 273.79968 179.62251 264.13422 c
192.45248 254.4687 213.25395 254.4687 226.08392 264.13422 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 77.853218 74.364906 cm
-25.97168 7.5 m
('"#$%)[ 10.019531 8.203125 9.121094 12.763672 0.000000 ] xS
/Cs2 SC
0.99942404 0.98555368 0 sc
CM
334.62384 97.081001 m
347.45389 87.415535 347.45389 71.744728 334.62384 62.079258 c
321.79388 52.413738 300.9924 52.413738 288.16245 62.079258 c
275.3324 71.744728 275.3324 87.415535 288.16245 97.081001 c
300.9924 106.74652 321.79388 106.74652 334.62384 97.081001 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -125 358 cm
459.62384 260.91901 m
472.45389 270.58447 472.45389 286.25528 459.62384 295.92075 c
446.79388 305.58627 425.9924 305.58627 413.16245 295.92075 c
400.3324 286.25528 400.3324 270.58447 413.16245 260.91901 c
425.9924 251.25348 446.79388 251.25348 459.62384 260.91901 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 311.39316 77.580132 cm
-30.073242 7.5 m
('"#$&&)[ 10.019531 8.203125 9.121094 12.763672 10.019531 0.000000 ] xS
0.60000002 i
/Cs2 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 -125 358 cm
199.74086 54.784779 m
199.74086 54.784779 252.66768 27.202625 317.68619 27 c
365.92938 26.849653 403.99713 41.825626 420.42923 49.563473 c
S
0 i
CM
302.54922 304.7955 m
296.79242 311.10892 l
294.06061 305.76691 l
h
302.54922 304.7955 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
427.54922 53.204487 m
421.79242 46.891071 l
419.06061 52.233101 l
h
427.54922 53.204487 m
S
1 J
1 j
0.60000002 i
436.7222 108 m
436.7222 108 376.15665 132.71669 309.01865 133 c
260.02234 133.20676 224.33972 120.32966 208.6333 113.35541 c
S
0 i
CM
76.447182 248.16426 m
82.312126 241.95117 l
84.951294 247.33957 l
h
76.447182 248.16426 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
201.44719 109.83574 m
207.31212 116.04882 l
209.95129 110.66043 l
h
201.44719 109.83574 m
S
1 J
1 j
0.60000002 i
200.5 253.50079 m
200.5 253.50079 252.66768 230.20262 317.68619 230 c
365.75797 229.85019 404.14142 242.37756 420.88452 248.91812 c
S
0 i
CM
303.25092 105.95652 m
297.05807 111.84283 l
294.71463 106.3194 l
h
303.25092 105.95652 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
428.25092 252.04349 m
422.05807 246.15718 l
419.71463 251.6806 l
h
428.25092 252.04349 m
S
1 J
1 j
0.60000002 i
437.48135 306.71603 m
437.48135 306.71603 380.1131 331.71671 312.9751 332 c
263.48706 332.20883 225.84409 318.91559 209.47232 311.9118 c
S
0 i
CM
77.221107 49.479126 m
83.19706 43.372734 l
85.738701 48.807812 l
h
77.221107 49.479126 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
202.22112 308.52087 m
208.19705 314.62726 l
210.73869 309.1922 l
h
202.22112 308.52087 m
S
/Cs1 SC
0 sc
1 0 0 -1 193.99068 215 cm
/F1.1[ 16 0 0 -16 0 0]sf
-41.487999 5.776001 m
(!"#$%&'%\(*)[ 7.712000 8.896000 5.616000 8.896000 4.448000 10.960000 8.288000 4.448000 12.160000 0.000000 ] xS
1 0 0 -1 202.1752 15.997568 cm
-40.599998 5.776001 m
(!"#$%!'%\(*)[ 7.712000 8.896000 5.616000 8.896000 4.448000 9.184000 8.288000 4.448000 12.160000 0.000000 ] xS
1 0 0 -1 189.83176 138 cm
-44.007999 5.776001 m
(!"#$%!'%\(\)\))[ 7.712000 8.896000 5.616000 8.896000 4.448000 9.184000 8.288000 4.448000 12.160000 9.184000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 -125 358 cm
176.3131 99.226143 m
176.3131 99.226143 156.19897 110.98107 146 104.28477 c
135.80103 97.588486 133.13042 85.444496 140.3131 75.589798 c
144.43193 69.938744 154.03392 68.766228 161.47617 68.794167 c
S
0 i
CM
44.45805 288.63544 m
36.692238 292.19803 l
36.264557 286.21329 l
h
44.45805 288.63544 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
169.45805 69.364571 m
161.69223 65.801964 l
161.26456 71.786697 l
h
169.45805 69.364571 m
S
1 J
1 j
0.60000002 i
176.3131 299.26428 m
176.3131 299.26428 156.19897 311.01923 146 304.32291 c
135.80103 297.62662 133.13042 285.48264 140.3131 275.62793 c
144.43193 269.97687 154.03392 268.80438 161.47617 268.83231 c
S
0 i
CM
44.45805 88.59729 m
36.692238 92.159897 l
36.264557 86.175163 l
h
44.45805 88.59729 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
169.45805 269.40271 m
161.69223 265.84009 l
161.26456 271.82483 l
h
169.45805 269.40271 m
S
/Cs1 SC
0 sc
0.64278764 -0.76604444 -0.76604444 -0.64278764 358.20364 306.80447 cm
-13.776 5.776001 m
(*"++)[ 11.552000 8.896000 3.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 -125 358 cm
460.285 98.092407 m
460.285 98.092407 477.20892 100.22366 482.69577 90.393188 c
488.18259 80.562729 489.85117 73.875473 479.65219 63.393192 c
473.8555 57.435486 464.00201 55.019691 456.57571 54.044186 c
S
0 i
CM
323.59164 304.4819 m
331.37711 300.9624 l
331.77158 306.9494 l
h
323.59164 304.4819 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
448.59164 53.518112 m
456.37711 57.037601 l
456.77158 51.050587 l
h
448.59164 53.518112 m
S
/Cs1 SC
0 sc
0.64278764 -0.76604444 -0.76604444 -0.64278764 356.3504 109.80334 cm
-13.776 5.776001 m
(*"++)[ 11.552000 8.896000 3.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 -125 358 cm
460.285 296.44012 m
460.285 296.44012 477.20892 298.57138 482.69577 288.74091 c
488.18259 278.91046 489.85117 272.22321 479.65219 261.74091 c
473.8555 255.7832 464.00201 253.36742 456.57571 252.39191 c
S
0 i
CM
323.59164 106.13417 m
331.37711 102.61468 l
331.77158 108.6017 l
h
323.59164 106.13417 m
f
0 J
0 j
1 0 0 -1 -125 358 cm
448.59164 251.86583 m
456.37711 255.38531 l
456.77158 249.3983 l
h
448.59164 251.86583 m
S
/Cs1 SC
0 sc
0.90630782 0.42261827 0.42261827 -0.90630782 24.294094 299.87564 cm
-13.776 5.776001 m
(*"++)[ 11.552000 8.896000 3.552000 0.000000 ] xS
0.90630782 0.42261827 0.42261827 -0.90630782 24.294094 100.37563 cm
-13.776 5.776001 m
(*"++)[ 11.552000 8.896000 3.552000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
