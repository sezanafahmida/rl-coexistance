%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 486.000000 497.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.3 (Build 19D76) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 486 497
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 486 497
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /T put
dup 34 /x put
dup 35 /S put
dup 36 /l put
dup 37 /e put
dup 38 /p put
dup 39 /I put
dup 40 /d put
dup 41 /R put
dup 42 /G put
dup 43 /t put
dup 44 /space put
dup 45 /s put
dup 46 /W put
dup 47 /a put
dup 48 /k put
dup 49 /u put
dup 50 /n put
dup 51 /r put
dup 52 /m put
dup 53 /i put
dup 54 /F put
dup 55 /h put
dup 56 /slash put
dup 57 /C put
dup 58 /H put
dup 59 /o put
dup 60 /g put
dup 61 /N put
dup 62 /c put
dup 63 /v put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/slash 2 def
/C 3 def
/F 4 def
/G 5 def
/H 6 def
/I 7 def
/N 8 def
/R 9 def
/S 10 def
/T 11 def
/W 12 def
/a 13 def
/c 14 def
/d 15 def
/e 16 def
/g 17 def
/h 18 def
/i 19 def
/k 20 def
/l 21 def
/m 22 def
/n 23 def
/o 24 def
/p 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/v 30 def
/x 31 def
/uni20BE 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2803798CF70BB8A1CBECCF3780F5DE932E1E3200B605F774AABE5460F4B6F8D1A114B914EBD94E691CE7782847B708FC9C80DA25809C0F708B7CFED9264E9FCDDBA12E2A654012E22933C090312A0830082014C37C4E6A1600AEA556B59E1D846BF1F5430FC5388EA257160AE2835EF3FC7EF399A592874A3D6ACCBE1303CD7E514EA458BEED8AC1B564227B0E0DACF98B308E11EBBC4A17EB9A6BCF957C092412DAB4D495E27EE2840240EE19D2B46245B4BFB323ACF13241559299272638B115A9E522FC232E6CA8C2C7702B48B4424466B76BC2DA85EED90B097F0A4C361426D0BF7B4EAE24FDC1DFCE0F6AD5D1EC81D6F69DB6443A5BCD4100E400CBCA521EC81482113068E426CAF8BFE902702D968EA96A5A5C908C038917BA5401EBBBF0D3FA88D3443410C10E86127ADDC672A521706846E27C05671A5F12D90ED56AE8D2BA454E11860B1875C893E71099645177C3461443E674A24E4439FD5D4278F3F139C1AE31C241C6E819F75BE3CC71323E28EF4BE9E0C82FF4AB1EA6824DA8C93D35D240A6DF23CF6B2BE52C9CACDF401406DE5A7C1CDE8B884EA416932DDDC60D36A8AA80AFAB64B02D4C0B4C3798DA5CE9DF3123EEFA662F500FD9F8356DC0880C5F7990FF5F0C3F2E558FA55B85AB8DBA3FF14D7E67BD40CCD47DB89AB6184558F9F13A18ACE65C5A51C79C1D1464041959DD5766E644C9AF335FF5BB909823FE6B63A299E6044011BB54D576AD98DF57AA590A98D98225279CFFC5AF6C586151655


CD80DF7EFE9388F794A647F5D013F329959F347C0AD5D73B13ECE835B35D49F4D9A09F87713845E94F31CA54000714F6E7D5EBFD3E6CE0F827BC54A9D7CD94C25F5C1FA747BBAD479096B07F572B700A6D1B7BF236B01A6B4CB47264D2A031739030516D1D06E96A57402BAD8265C0FF723032B9F98FFF44F5EC4AA3A04020076E25D8E6FD6C29E99E84D5F3CD3ABECFCB0CE67EE469676D41D499F4AB47EB816DEFE1DAA6A8AEF87C395705591A44D1397DA07E9C677E74BFDF972A1ADBDA0BECB2BCE136855303959A2AA95B3F418A04A3250BDA17B31A2C948CBB2D5B5E02B089D657EBE0E4D169011B785088176B1347CE7236F7CCCEE49840C8B8FFA1F26C2A030E40CB544FDE9A1AEAFBBD976D973CCB71BBCD5ADAA5DB1FCD38A6F28227C5F15D4861E832A8505C6A8395F93E1E8009BAF61BCE19E9A61593A7BDB9ACCCC3EDEED214CBC29AFDD8962D840314EF152D0D87C0406913DB33E301103A16ED5433C46CC634C72A44D9FF68243375F80C154F5E54245EA7A3C6C57C5EE67FBA4FDC1AD00301D48A8441B68187400940409DA0F88676DCF48D435BE2B6898361340A06DCE1F6CA030BE7C137551B07D5B835D4B05993AAAD1969621D2CE34ECB1926D2BDF7DC63BD847A9949D115F3AB70BA6117E4EA706C077D6D0533625CAD57CDEC87824BD97AA9E3B06BB136CB08820684582816C1A1C50424159E58938B0A050CB9293BBB8BB7935E6FAB8B2568B240EDAB2B71380E026CF71BB7CAFB7DBA1447CABF0A65AC8BD0972513B020CABA21A399962C9A2144A974F99B8374BE0105FC070FEFEC23662AA67B439244100FC76DD9F44C1206C252E27C91A4CB8A673FE558CC9A161367D642C40D102C530AD84DD677A25B7ABFD7C1451610C26A994CF05DB7906BEAEE82772FB9E66CC4670B8A090B7EFF0B2CCE7F01D6DFA0170CC1FD5AB7D80C89BC75A16198C9A4BF912FFCCE65E0E33BBAA64D0C1C7896E8D3F71207CD4B73CD52A1D51430E6DA1638CE06CD645B5C40C49EEBF7F25E1F05623908F68E5DF8F15A5AFDBE40FECE9AA962717AB976701DF344263DF3F23CDBEAF04F76AFAEDB0B5271504501BB9E9807698CE557221B3816DD47E09BBAABF025316875FD9CBAC7473C290778FCE74E32BA0016BA2A1AC382E3A32FCD3EC9F6CD57C82D235A25BB9FFDE627C29C6C7DB0FF4C6F1E9A58996F248408CC5585D023E88DE6D14F6F2B3309D18CDDE0F3F99F13A69C98134B7F4FE29C8CDA1941C4563928105766CD522A0FB23C110B72FC89C4EFF1F8F4AD105C4FFE4872B9884C1856A9DAF8D26E160E364CE8FE378B4113EB2A98BBEEF450C3E57183ABE23E09C418F7BBECE47837AE32B2102A002CD3CEFD52201274E7E655D83C7A146C675CB11226B90C4505135807068AD84002E29D6772FCFC76BC1B778E061FF90D21

DAF7CF8270981926A5E10F6045A220F486E189A6EDD22CBC04C5615851E1B92730DB56CE3F289E539F266053BF33BE87FB9AFAD13828E6DB891AF985689A662C2C1D896C22A8C8FEC3D91FACB050F14181E8CC26C74A076200EE88EDD0819284D1EF605960BB2351DDCA02190FAAA8E9D03CCCFB8E184DB047C906EC7059A738EF24105173C69C6A353D52692241CCCD425853A00EAFE9516AF55AA988AAD6751ACB55A4E636093E71A45F289E93FB0FE5A89F7C1366DD68618B02177175E10831435D9539C8A9C666FCD8FA80DE95D36123858BADA49EF0648E278D396A7BFCB13769ACEEE189217B888CA6DF133DA71A8E65275788CBC259CDB3E0DD581EE20E735A233A0C0A24EF8A2E7DEA9F68A45E87865F523CCCB4CEE8CDB4FF17CF9C6AEA764575D1EB5784AADC3181686FB7BEBB46DB4DD70E1F7B848BE8A185792FAD1063F347865E9A6C7CEEE2224F3C1D93C69C88C34C9DA64DA8185D02F05C2E1778ACD6FBE430368F03519B22FE0EBCC974EF02B32BC44D386E0E25DBE2B4F9F2E299BC98B1EA3C73F9419F56E2D3FD986185D1EFFF893B3AC6FFBA8688DF84711EED98D0FE58C8354C5A53B1D677CC086F0CF0C0A48825B32DC2DE595150CA2D56FA81761F31DF527DA8E56FE59683B829E1202BAA1D1FA02A3EFF165C49AD442087AA4062DEAF39E9DDAC605539219B45691CFFDE1A4B2DB29BE0C9C6562664BA5BCB1325054EBEF48871DD82DD4DBB5F0967C5F4DA5ACE612118135BC1F49A92C8D46C97E4ADE4663138ECC9DD0297D6AE57442883C969775D0A61F79F6AA09A0878B5A233F2002C36E9780AB84FFE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 486 497 rc
0 497 m
486 497 l
486 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1061 1366.5 m
2106 1366.5 l
2106 -1194.5 l
-1061 -1194.5 l
h
-1061 1366.5 m
f
1 1 0 sc
173.11531 296.99707 m
182.29266 288.11267 182.29266 273.70819 173.11531 264.82376 c
163.93799 255.93929 149.05864 255.93929 139.88132 264.82376 c
130.70396 273.70819 130.70396 288.11267 139.88132 296.99707 c
149.05864 305.88156 163.93799 305.88156 173.11531 296.99707 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -73 530 cm
246.11531 233.00291 m
255.29266 241.88734 255.29266 256.29181 246.11531 265.17624 c
236.93799 274.0607 222.05864 274.0607 212.88132 265.17624 c
203.70396 256.29181 203.70396 241.88734 212.88132 233.00291 c
222.05864 224.11845 236.93799 224.11845 246.11531 233.00291 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 22 0 0 -22 0 0]sf
217.48631 256.78159 m
(!")[ 12.628000 0.000000 ] xS
/Cs2 SC
1 1 0 sc
CM
399.23615 216.25853 m
413.58798 207.37411 413.58798 192.96962 399.23615 184.08521 c
384.8844 175.20074 361.6156 175.20074 347.26385 184.08521 c
332.91202 192.96962 332.91202 207.37411 347.26385 216.25853 c
361.6156 225.14299 384.8844 225.14299 399.23615 216.25853 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -73 530 cm
472.23615 313.74149 m
486.58798 322.62589 486.58798 337.03036 472.23615 345.91479 c
457.8844 354.79926 434.6156 354.79926 420.26385 345.91479 c
405.91202 337.03036 405.91202 322.62589 420.26385 313.74149 c
434.6156 304.85699 457.8844 304.85699 472.23615 313.74149 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 19 0 0 -19 0 0]sf
422.1485 336.56213 m
(#$%%&)[ 12.312000 4.218000 10.203000 10.203000 0.000000 ] xS
/Cs2 SC
1 1 0 sc
CM
405.73615 419.79587 m
420.08798 409.05447 420.08798 391.63925 405.73615 380.89786 c
391.3844 370.15643 368.1156 370.15643 353.76385 380.89786 c
339.41202 391.63925 339.41202 409.05447 353.76385 419.79587 c
368.1156 430.53732 391.3844 430.53732 405.73615 419.79587 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -73 530 cm
478.73615 110.20413 m
493.08798 120.94552 493.08798 138.36075 478.73615 149.10213 c
464.3844 159.84358 441.1156 159.84358 426.76385 149.10213 c
412.41202 138.36075 412.41202 120.94552 426.76385 110.20413 c
441.1156 99.462685 464.3844 99.462685 478.73615 110.20413 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 22 0 0 -22 0 0]sf
435.02899 137.34514 m
('\($%)[ 5.698000 13.046000 4.884000 0.000000 ] xS
/Cs2 SC
1 1 0 sc
CM
193.61699 119.49633 m
202.79436 110.61191 202.79436 96.207428 193.61699 87.323006 c
184.43968 78.438545 169.56032 78.438545 160.38301 87.323006 c
151.20564 96.207428 151.20564 110.61191 160.38301 119.49633 c
169.56032 128.3808 184.43968 128.3808 193.61699 119.49633 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -73 530 cm
266.617 410.50366 m
275.79434 419.38809 275.79434 433.79257 266.617 442.677 c
257.43967 451.56146 242.56032 451.56146 233.38301 442.677 c
224.20564 433.79257 224.20564 419.38809 233.38301 410.50366 c
242.56032 401.6192 257.43967 401.6192 266.617 410.50366 c
S
/Cs1 SC
0 sc
0 i
236.767 434.28232 m
(\)")[ 15.070000 0.000000 ] xS
0.60000002 i
/Cs2 SC
1 0.14913142 0 sc
258.80118 233.41296 m
422.84802 145.65027 l
S
0 i
CM
178.74719 292.81326 m
187.21634 293.9418 l
184.386 299.23227 l
h
178.74719 292.81326 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
251.74719 237.18675 m
260.21634 236.05821 l
257.38602 230.76773 l
h
251.74719 237.18675 m
S
1 J
2 j
0.60000002 i
413.33481 110.45266 m
387.69119 101.73706 352.99472 96.848305 320 114.5 c
275.24866 138.44133 248.51733 195.88248 236.70966 227.43216 c
S
0 i
CM
347.83047 416.75653 m
341.38004 422.35938 l
339.2865 416.73645 l
h
347.83047 416.75653 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
420.83047 113.24347 m
414.38004 107.64063 l
412.2865 113.26354 l
h
420.83047 113.24347 m
S
1 J
2 j
0.60000002 i
242.0347 394.88339 m
239.95316 383.82236 237.92203 369.99533 236.58984 353.60547 c
232.76523 306.55124 236.5 260.5 236.5 260.5 c
S
0 i
CM
170.63446 127.27478 m
171.97482 135.713 l
166.09592 134.51367 l
h
170.63446 127.27478 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
243.63446 402.72522 m
244.97482 394.28702 l
239.09592 395.48633 l
h
243.63446 402.72522 m
S
1 J
2 j
0.60000002 i
206.54425 272.80975 m
184.79736 297.41428 155.95642 336.65985 159.625 368.42188 c
163.44833 401.52383 201.39853 416.25119 226.89001 422.45117 c
S
0 i
CM
138.92197 263.11505 m
131.32382 259.20758 l
135.76663 255.17503 l
h
138.92197 263.11505 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
211.92197 266.88495 m
204.32382 270.79242 l
208.76663 274.82495 l
h
211.92197 266.88495 m
S
1 J
2 j
0.60000002 i
262.20779 257.13681 m
415.26227 317.58887 l
S
0 i
CM
181.76715 275.80203 m
188.10573 270.07294 l
190.30986 275.65344 l
h
181.76715 275.80203 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
254.76715 254.19797 m
261.10574 259.92706 l
263.30988 254.34657 l
h
254.76715 254.19797 m
S
1 J
2 j
0.60000002 i
426.88235 300.87177 m
413.64752 285.49539 392.94586 267.50113 362.73047 256.24609 c
322.99597 241.44525 278.89926 242.80234 252.72244 245.60384 c
S
0 i
CM
358.90607 222.90024 m
356.21838 231.0105 l
351.54831 227.24347 l
h
358.90607 222.90024 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
431.90607 307.09976 m
429.21838 298.9895 l
424.54831 302.75653 l
h
431.90607 307.09976 m
S
1 J
2 j
0.60000002 i
445.422 299.82791 m
451.56619 157.14403 l
S
0 i
CM
372.07782 222.17949 m
375.41922 230.04301 l
369.42477 230.30115 l
h
372.07782 222.17949 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
445.07782 307.8205 m
448.41922 299.95697 l
442.42477 299.69885 l
h
445.07782 307.8205 m
S
1 J
2 j
0.60000002 i
489.17471 152.86699 m
519.57623 174.71921 557.79688 209.12872 556.68359 243.41406 c
555.50171 279.81216 510.3454 305.08508 478.14905 318.51993 c
S
0 i
CM
409.61819 381.71805 m
414.45493 374.6749 l
417.89343 379.59189 l
h
409.61819 381.71805 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
482.61819 148.28194 m
487.45493 155.3251 l
490.89343 150.40813 l
h
482.61819 148.28194 m
S
1 J
2 j
0.60000002 i
466.53885 358.68976 m
459.91574 374.84387 446.02734 406.71582 439.21619 407.57812 c
430.08231 408.7345 437.97064 353.58173 437.97064 353.58173 c
S
0 i
CM
396.50607 178.73566 m
390.75168 172.42004 l
396.3233 170.1936 l
h
396.50607 178.73566 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
469.50607 351.26434 m
463.75168 357.57996 l
469.3233 359.8064 l
h
469.50607 351.26434 m
S
1 J
2 j
0.60000002 i
474.90369 101.80079 m
498.25955 96.433784 555.77075 83.737206 552.94141 89.525391 c
550.78955 93.927673 514.34747 107.76624 486.02853 117.96608 c
S
0 i
CM
394.11597 426.38275 m
402.58829 425.27835 l
401.2254 431.12152 l
h
394.11597 426.38275 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
467.11597 103.61725 m
475.58829 104.72163 l
474.2254 98.878471 l
h
467.11597 103.61725 m
S
1 J
2 j
0.60000002 i
230.72523 451.79813 m
232.13936 469.77676 235.52592 505.72736 239.78906 502.45703 c
243.33818 499.73444 246.44899 470.63092 248.27708 449.27948 c
S
0 i
CM
157.14651 86.179199 m
154.73323 77.983101 l
160.7175 78.417236 l
h
157.14651 86.179199 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
230.14651 443.8208 m
227.73323 452.01691 l
233.7175 451.58276 l
h
230.14651 443.8208 m
S
1 J
2 j
0.60000002 i
421.39713 353.10428 m
271.4928 417.37537 l
S
0 i
CM
355.74982 180.04817 m
347.21497 179.65298 l
349.57932 174.13846 l
h
355.74982 180.04817 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
428.74982 349.95184 m
420.21497 350.34702 l
422.57932 355.86154 l
h
428.74982 349.95184 m
S
1 J
2 j
0.60000002 i
281.1763 438.20673 m
305.36755 444.79684 339.95386 448.98633 371.31894 433.52161 c
407.6604 415.60321 428.50735 376.80661 438.58871 352.08102 c
S
0 i
CM
200.51241 94.098328 m
207.30931 88.921265 l
209.03746 94.667007 l
h
200.51241 94.098328 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
273.51239 435.90167 m
280.30933 441.07874 l
282.03745 435.33301 l
h
273.51239 435.90167 m
S
/Cs1 SC
0 sc
0.93969262 -0.34202015 -0.34202015 -0.93969262 28.800158 640.34967 cm
/F1.1[ 16 0 0 -16 0 0]sf
329.58813 239.26985 m
(*%+,-$%%&,)[ 12.144000 8.592000 5.040000 4.448000 8.000000 3.552000 8.592000 8.592000 9.488000 0.000000 ] xS
/Cs2 SC
0 0 0 sc
0.91354543 -0.40673664 -0.40673664 -0.91354543 75.152672 648.07959 cm
304.85269 286.01398 m
(./0%,1&,/2\(,)[ 14.224000 8.592000 8.304000 8.592000 4.448000 8.896000 9.488000 4.448000 8.592000 8.896000 9.488000 0.000000 ] xS
322.7887 304.46198 m
(+3/2-45+)[ 5.040000 5.328000 8.592000 8.896000 8.000000 13.648000 3.552000 0.000000 ] xS
/Cs1 SC
0 sc
0.79863548 0.60181504 0.60181504 -0.79863548 -68.446114 323.38986 cm
229.53523 102.276 m
(6525-7,!"897/22%$,:;&)[ 9.184000 3.552000 8.896000 3.552000 8.000000 8.896000 4.448000 9.184000 8.288000 5.328000 11.552000 8.896000 8.592000 8.896000 8.896000 8.592000 3.552000 4.448000 11.552000 9.184000 0.000000 ] xS
0.84804809 0.52991927 0.52991927 -0.84804809 -109.59984 317.73007 cm
321.4527 175.73036 m
(!3/2-45+)[ 7.712000 5.328000 8.592000 8.896000 8.000000 13.648000 3.552000 0.000000 ] xS
0.93969262 -0.34202015 -0.34202015 -0.93969262 -3.3150146 574.18658 cm
97.907822 172.0603 m
(97/2<%,97/22%$8)[ 11.552000 8.896000 8.592000 8.896000 9.184000 8.592000 4.448000 11.552000 8.896000 8.592000 8.896000 8.896000 8.592000 3.552000 0.000000 ] xS
103.84383 190.5083 m
(97/2<%,#68=1$$)[ 11.552000 8.896000 8.592000 8.896000 9.184000 8.592000 4.448000 10.368000 9.184000 5.328000 11.552000 8.896000 3.552000 0.000000 ] xS
1 J
2 j
0.60000002 i
/Cs2 SC
1 0.14913142 0 sc
1 0 0 -1 -73 530 cm
199.66786 234.38582 m
175.86447 222.45515 146.17712 207.04659 144.21559 203.46094 c
140.91139 197.42087 217.83524 227.76953 217.83524 227.76953 c
S
0 i
CM
133.82953 292.04337 m
128.00876 298.29782 l
125.33148 292.92828 l
h
133.82953 292.04337 m
f
0 J
0 j
1 0 0 -1 -73 530 cm
206.82953 237.95665 m
201.00876 231.70216 l
198.33148 237.07173 l
h
206.82953 237.95665 m
S
/Cs1 SC
0 sc
0.034899496 0.99939084 0.99939084 -0.034899496 152.44585 -137.06425 cm
423.88156 222.58012 m
(*%+,-$%%&,)[ 12.144000 8.592000 5.040000 4.448000 8.000000 3.552000 8.592000 8.592000 9.488000 0.000000 ] xS
0.10452846 0.99452192 0.99452192 -0.10452846 173.80368 -203.3187 cm
510.61829 226.15973 m
(*;,+;,)[ 12.144000 9.184000 4.448000 5.040000 9.184000 0.000000 ] xS
517.73029 244.60773 m
('\($%)[ 4.144000 9.488000 3.552000 0.000000 ] xS
-0.017452406 0.99984771 0.99984771 0.017452406 -295.77744 19.296179 cm
109.1609 370.58929 m
(!3/2-45+)[ 7.712000 5.328000 8.592000 8.896000 8.000000 13.648000 3.552000 0.000000 ] xS
-0.069756471 0.99756408 0.99756408 0.069756471 -203.64961 -70.026634 cm
186.00214 366.70569 m
(\)%>%5?%)[ 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 0.000000 ] xS
0.84804809 0.52991927 0.52991927 -0.84804809 -232.89592 284.67209 cm
312.4241 407.25162 m
(*%+,#$%%&)[ 12.144000 8.592000 5.040000 4.448000 10.368000 3.552000 8.592000 8.592000 0.000000 ] xS
0.66913062 0.74314481 0.74314481 -0.66913062 -267.13449 96.983749 cm
360.77795 440.30075 m
(\)%>%5?%)[ 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 -73 530 cm
427.16418 432.36633 m
(=1$$)[ 11.552000 8.896000 3.552000 0.000000 ] xS
225.948 521.43359 m
(=1$$)[ 11.552000 8.896000 3.552000 0.000000 ] xS
485 85 m
(=1$$)[ 11.552000 8.896000 3.552000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
